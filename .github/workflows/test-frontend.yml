name: Mobile E2E Tests

on:
  push:
    branches: [ main, test-frontend ]
  pull_request:
    branches: [ main, test-frontend ]
  workflow_dispatch:

env:
  PROJECT_DIR: ./frontend

jobs:
  detox_tests:
    name: Detox E2E Tests
    runs-on: macos-latest
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Java for Android
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: npm install

      - name: Install Detox CLI
        run: npm install -g detox-cli

      - name: Install Expo CLI
        run: npm install -g expo-cli

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: Accept Android licenses
        run: yes | sdkmanager --licenses || true
        
      - name: Prebuild Android app
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          if [ ! -d "android/app" ]; then
            npx expo prebuild --platform android --clean
          fi
          
      - name: Build for Detox
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          cd android && ./gradlew assembleDebug assembleAndroidTest -DtestBuildType=debug

      - name: Create emulator
        run: |
          echo "no" | avdmanager create avd --force --name Pixel_3a_API_30 --package "system-images;android-30;google_apis;x86_64" --device "pixel_3a"
          
      - name: Start emulator and run tests
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          # Start emulator in background
          $ANDROID_HOME/emulator/emulator -avd Pixel_3a_API_30 -no-snapshot -no-window -no-audio -no-boot-anim -gpu swiftshader_indirect &
          
          # Wait for emulator to boot
          $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done'
          
          # Show connected devices
          $ANDROID_HOME/platform-tools/adb devices
          
          # Create artifacts directory
          mkdir -p artifacts
          
          # Run tests
          detox test --configuration android.emu.debug --cleanup --artifacts-location ./artifacts
        
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: detox-artifacts
          path: ${{ env.PROJECT_DIR }}/artifacts
          retention-days: 5