require("dotenv").config();
const { PrismaClient } = require("@prisma/client");
const bcrypt = require("bcrypt");

const prisma = new PrismaClient();

async function main() {
  // Ajout de l'admin
  const hashedPassword = await bcrypt.hash(process.env.ADMIN_PASSWORD, 10);
  const admin = await prisma.users.create({
    data: {
      role: "admin",
      prenom: process.env.ADMIN_PRENOM,
      nom: process.env.ADMIN_NOM,
      sexe: process.env.ADMIN_SEXE,
      date_de_naissance: new Date(process.env.ADMIN_DATE_DE_NAISSANCE),
      email: process.env.ADMIN_EMAIL,
      mot_de_passe: hashedPassword,
    },
  });

  // Ajout des badges
  // TO DO : Ajouter des images pour les badges
  const badges = [
    {
      nom: "Premier Aliment",
      image: "https://www.google.com",
      description: "Obtenu apr√®s avoir ajout√© le premier aliment √† son suivi.",
      condition_obtention: "ADD_FIRST_FOOD",
    },
    {
      nom: "Premi√®re S√©ance",
      image: "https://www.google.com",
      description: "Obtenu apr√®s avoir effectu√© une premi√®re s√©ance.",
      condition_obtention: "DO_FIRST_SESSION",
    },
    {
      nom: "1er Jour",
      image: "https://www.google.com",
      description:
        "Obtenu apr√®s avoir compl√©t√© tous les objectifs du premier jour.",
      condition_obtention: "FIRST_DAY_COMPLETED",
    },
    {
      nom: "7 Jours",
      image: "https://www.google.com",
      description:
        "Obtenu apr√®s avoir compl√©t√© tous les objectifs des 7 premiers jours.",
      condition_obtention: "SEVEN_DAYS_COMPLETED",
    },
  ];
  await prisma.badges.createMany({ data: badges });

  // Ajout des objectifs
  const objectifs = [
    {
      titre: "Ajouter un aliment √† son suivi quotidien",
    },
    {
      titre: "Effectuer la s√©ance du jour",
    },
  ];
  await prisma.objectifs.createMany({ data: objectifs });

  // Ajout des niveaux de s√©dentarit√©
  const niveauxSedentarites = [
    {
      nom: "Tr√®s faible",
      description: "Travail de bureau, peu de mouvement",
      valeur: 1.2,
    },
    {
      nom: "Faible",
      description: "Activit√© l√©g√®re, marche occasionnelle",
      valeur: 1.375,
    },
    {
      nom: "Mod√©r√©",
      description: "Actif au quotidien, marche r√©guli√®re",
      valeur: 1.55,
    },
    {
      nom: "√âlev√©",
      description: "Travail physique intense, sport r√©gulier",
      valeur: 1.725,
    },
    {
      nom: "Super actif",
      description: "Tr√®s actif, sport quotidien intense",
      valeur: 1.9,
    },
  ];
  await prisma.niveaux_sedentarites.createMany({ data: niveauxSedentarites });

  // Ajout des repartitions nutritionnelles
  const repartitionsPerteDePoids = [
    {
      nom: "Cardio",
      description:
        "Ce plan est con√ßu pour ceux qui pratiquent r√©guli√®rement des activit√©s cardio comme la course, le v√©lo ou la natation. L‚Äôaccent est mis sur un apport plus √©lev√© en glucides pour fournir de l‚Äô√©nergie rapide n√©cessaire √† l‚Äôendurance, tout en maintenant un apport ad√©quat en prot√©ines pour pr√©server la masse musculaire.",
      type: "perte_de_poids",
      pourcentage_glucides: 60,
      pourcentage_proteines: 20,
      pourcentage_lipides: 20,
    },
    {
      nom: "Athl√®te",
      description:
        "Adapt√© aux athl√®tes qui souhaitent optimiser leurs performances sportives tout en perdant du poids. La combinaison de glucides pour l‚Äô√©nergie, de prot√©ines pour la r√©paration musculaire, et de graisses saines pour la r√©cup√©ration permet une approche √©quilibr√©e.",
      type: "perte_de_poids",
      pourcentage_glucides: 55,
      pourcentage_proteines: 20,
      pourcentage_lipides: 25,
    },
    {
      nom: "Durable",
      description:
        "Ce plan favorise une approche progressive et durable de la perte de poids. Il est id√©al pour ceux qui souhaitent maigrir sans sacrifier l‚Äô√©quilibre nutritionnel. Les prot√©ines sont l√©g√®rement r√©duites, tandis que l'apport en graisses reste relativement √©lev√© pour favoriser la sati√©t√© et un bon m√©tabolisme lipidique.",
      type: "perte_de_poids",
      pourcentage_glucides: 55,
      pourcentage_proteines: 15,
      pourcentage_lipides: 30,
    },
  ];
  const repartitionsPriseDePoids = [
    {
      nom: "Cardio",
      description:
        "Ce plan est destin√© aux sportifs qui combinent cardio et musculation l√©g√®re. L'apport √©lev√© en glucides soutient les performances pendant les s√©ances d‚Äôentra√Ænement cardio, tandis que les prot√©ines permettent une l√©g√®re augmentation musculaire.",
      type: "prise_de_poids",
      pourcentage_glucides: 60,
      pourcentage_proteines: 20,
      pourcentage_lipides: 20,
    },
    {
      nom: "Athl√®te",
      description:
        "Ce programme a √©t√© con√ßu pour les athl√®tes qui souhaitent d√©velopper leur masse musculaire tout en maintenant un niveau de performance √©lev√©. Un apport √©quilibr√© entre glucides, prot√©ines et graisses soutient √† la fois la r√©cup√©ration musculaire et les besoins √©nerg√©tiques √©lev√©s.",
      type: "prise_de_poids",
      pourcentage_glucides: 55,
      pourcentage_proteines: 20,
      pourcentage_lipides: 25,
    },
    {
      nom: "Se muscler",
      description:
        "Ce plan est id√©al pour les adeptes de musculation cherchant √† augmenter leur masse musculaire. L'apport en prot√©ines est ici maximis√© (25 %) pour favoriser la synth√®se musculaire, tandis que l‚Äôapport √©quilibr√© en glucides et graisses garantit l‚Äô√©nergie n√©cessaire pour les entra√Ænements intensifs.",
      type: "prise_de_poids",
      pourcentage_glucides: 50,
      pourcentage_proteines: 25,
      pourcentage_lipides: 25,
    },
  ];
  const repartitionsMaintien = [
    {
      nom: "Cardio",
      description:
        "Plan nutritionnel adapt√© aux personnes pratiquant des exercices cardio r√©guliers. L'accent est mis sur un √©quilibre entre glucides, prot√©ines et graisses pour maintenir une bonne forme physique.",
      type: "maintien",
      pourcentage_glucides: 60,
      pourcentage_proteines: 20,
      pourcentage_lipides: 20,
    },
    {
      nom: "Durable",
      description:
        "Un plan √©quilibr√© qui peut √™tre maintenu sur le long terme, avec un apport suffisant en glucides pour l'√©nergie, des prot√©ines pour le maintien musculaire et des graisses pour une bonne sant√© g√©n√©rale.",
      type: "maintien",
      pourcentage_glucides: 55,
      pourcentage_proteines: 15,
      pourcentage_lipides: 30,
    },
    {
      nom: "Athl√®te",
      description:
        "Pour les athl√®tes qui cherchent √† maintenir leurs performances tout en √©quilibrant leur alimentation avec une proportion ad√©quate de glucides, prot√©ines et graisses.",
      type: "maintien",
      pourcentage_glucides: 55,
      pourcentage_proteines: 20,
      pourcentage_lipides: 25,
    },
    {
      nom: "Se muscler",
      description:
        "Plan nutritionnel pour ceux qui cherchent √† maintenir ou augmenter leur masse musculaire tout en maintenant une alimentation √©quilibr√©e.",
      type: "maintien",
      pourcentage_glucides: 50,
      pourcentage_proteines: 25,
      pourcentage_lipides: 25,
    },
  ];
  await prisma.repartitions_nutritionnelles.createMany({
    data: [
      ...repartitionsPerteDePoids,
      ...repartitionsPriseDePoids,
      ...repartitionsMaintien,
    ],
  });

  // Ajout des r√©gimes alimentaires
  const regimesAlimentaires = [
    {
      nom: "Aucun",
      description: "R√©gime standard √©quilibr√©",
    },
    {
      nom: "V√©g√©tarien",
      description: "Sans viandes, avec des produits laitiers",
    },
    {
      nom: "V√©g√©talien",
      description: "Aliments d'origine v√©g√©tale",
    },
    {
      nom: "Sans gluten",
      description: "Sans bl√© ni c√©r√©ales",
    },
    {
      nom: "Sans lactose",
      description: "Sans produits laitiers ni d√©riv√©s",
    },
  ];
  await prisma.regimes_alimentaires.createMany({ data: regimesAlimentaires });

  // Ajout des activit√©s
  const activites = [
    {
      nom: "üö∂‚Äç‚ôÇÔ∏è Cardio mod√©r√©",
      description: "Maintien et bien-√™tre",
    },
    {
      nom: "üî• HIIT",
      description: "Performance maximale.",
    },
    {
      nom: "üèÉ‚Äç‚ôÇÔ∏è Running",
      description: "Endurance et cardio",
    },
    {
      nom: "üí™ Musculation",
      description: "D√©veloppement musculaire",
    },
    {
      nom: "üßò‚Äç‚ôÄÔ∏è Yoga/Pilates",
      description: "√âquilibre et d√©tente",
    },
  ];
  await prisma.activites.createMany({ data: activites });

  // Ajout des tags
  const tags = [
    // Tags pour les exercices et programmes
    { nom: "Cardio", type: "sport" },
    { nom: "Force", type: "sport" },
    { nom: "Flexibilit√©", type: "sport" },
    { nom: "HIIT", type: "sport" },
    { nom: "Poids du corps", type: "sport" },
    { nom: "Haut du corps", type: "sport" },
    { nom: "Bas du corps", type: "sport" },
    { nom: "Core", type: "sport" },
    { nom: "√âquilibre", type: "sport" },
    { nom: "Mobilit√©", type: "sport" },

    // Tags pour les aliments
    { nom: "V√©g√©tarien", type: "aliment" },
    { nom: "Faible en glucides", type: "aliment" },
    { nom: "Riche en prot√©ines", type: "aliment" },
    { nom: "Sans gluten", type: "aliment" },
    { nom: "Petit-d√©jeuner", type: "aliment" },
    { nom: "Collation", type: "aliment" },
    { nom: "Dessert", type: "aliment" },
    { nom: "Rapide", type: "aliment" },
  ];
  await prisma.tags.createMany({ data: tags });

  // R√©cup√©ration des IDs des tags pour les associer aux exercices
  const tagIds = await prisma.tags.findMany({
    where: { type: "sport" },
    select: { id_tag: true, nom: true },
  });

  // Cr√©ation des exercices avec leurs tags associ√©s
  const exercicesWithTags = [
    {
      exercice: {
        nom: "Pompes classiques",
        gif: "/assets/images/exercises/pushup.gif",
        description:
          "Position de planche, descendez en pliant les coudes puis remontez en les tendant.",
        equipement: "Aucun",
      },
      tags: ["Force", "Poids du corps", "Haut du corps"],
    },
    {
      exercice: {
        nom: "Squats",
        gif: "/assets/images/exercises/squat.gif",
        description:
          "Debout, pieds √©cart√©s largeur des √©paules, descendez comme pour vous asseoir puis remontez.",
        equipement: "Aucun",
      },
      tags: ["Force", "Poids du corps", "Bas du corps"],
    },
    {
      exercice: {
        nom: "Fentes avant",
        gif: "/assets/images/exercises/lunge.gif",
        description:
          "Faites un grand pas en avant et pliez les genoux √† 90 degr√©s, puis revenez en position initiale.",
        equipement: "Aucun",
      },
      tags: ["Force", "Poids du corps", "Bas du corps"],
    },
    {
      exercice: {
        nom: "Planche",
        gif: "/assets/images/exercises/plank.gif",
        description:
          "En appui sur les avant-bras et la pointe des pieds, maintenez votre corps droit comme une planche.",
        equipement: "Aucun",
      },
      tags: ["Force", "Poids du corps", "Core"],
    },
    {
      exercice: {
        nom: "Burpees",
        gif: "/assets/images/exercises/burpee.gif",
        description:
          "Encha√Ænez une position accroupie, une planche, une pompe, un retour accroupi et un saut vertical.",
        equipement: "Aucun",
      },
      tags: ["Cardio", "HIIT", "Poids du corps"],
    },
    {
      exercice: {
        nom: "Mountain climbers",
        gif: "/assets/images/exercises/montainclimber.gif",
        description:
          "En position de planche, ramenez alternativement les genoux vers la poitrine.",
        equipement: "Aucun",
      },
      tags: ["Cardio", "HIIT", "Core"],
    },
    {
      exercice: {
        nom: "Jumping jacks",
        gif: "/assets/images/exercises/jumpingjack.gif",
        description:
          "Sautez en √©cartant jambes et bras simultan√©ment, puis revenez en position initiale.",
        equipement: "Aucun",
      },
      tags: ["Cardio", "HIIT", "Poids du corps"],
    },
    {
      exercice: {
        nom: "Dips sur chaise",
        gif: "/assets/images/exercises/dips.gif",
        description:
          "Mains sur le bord d'une chaise, fl√©chissez les coudes pour descendre puis remontez.",
        equipement: "Chaise",
      },
      tags: ["Force", "Haut du corps"],
    },
    {
      exercice: {
        nom: "Curl biceps avec halt√®res",
        gif: "/assets/images/exercises/bicepscurl.gif",
        description:
          "Coudes pr√®s du corps, fl√©chissez les avant-bras pour amener les halt√®res aux √©paules.",
        equipement: "Halt√®res",
      },
      tags: ["Force", "Haut du corps"],
    },
    {
      exercice: {
        nom: "D√©velopp√© √©paules avec halt√®res",
        gif: "/assets/images/exercises/shoulderpress.gif",
        description:
          "Poussez les halt√®res au-dessus de la t√™te en tendant les bras, puis redescendez.",
        equipement: "Halt√®res",
      },
      tags: ["Force", "Haut du corps"],
    },
    {
      exercice: {
        nom: "Rowing avec halt√®res",
        gif: "/assets/images/exercises/rowing.gif",
        description:
          "Inclin√© en avant, tirez les halt√®res vers votre abdomen en serrant les omoplates.",
        equipement: "Halt√®res",
      },
      tags: ["Force", "Haut du corps"],
    },
    {
      exercice: {
        nom: "Superman",
        gif: "/assets/images/exercises/superman.gif",
        description:
          "Allong√© sur le ventre, soulevez simultan√©ment bras et jambes du sol.",
        equipement: "Aucun",
      },
      tags: ["Force", "Core", "Poids du corps"],
    },
    {
      exercice: {
        nom: "Bicycle crunch",
        gif: "/assets/images/exercises/crunchbicycle.gif",
        description:
          "Allong√© sur le dos, amenez alternativement le coude vers le genou oppos√©.",
        equipement: "Aucun",
      },
      tags: ["Core", "Poids du corps"],
    },
    {
      exercice: {
        nom: "Russian twist",
        gif: "/assets/images/exercises/russiantwist.gif",
        description:
          "Assis avec le buste inclin√© en arri√®re, pivotez le torse d'un c√¥t√© √† l'autre.",
        equipement: "Optionnel: poids l√©ger",
      },
      tags: ["Force", "Core"],
    },
    {
      exercice: {
        nom: "Gainage lat√©ral",
        gif: "/assets/images/exercises/sideplank.gif",
        description:
          "En appui sur un avant-bras et la tranche du pied, maintenez le corps align√©.",
        equipement: "Aucun",
      },
      tags: ["Force", "Core", "√âquilibre"],
    },
    {
      exercice: {
        nom: "Extensions des triceps avec halt√®re",
        gif: "/assets/images/exercises/tricepsextension.gif",
        description:
          "Bras au-dessus de la t√™te, fl√©chissez le coude pour descendre l'halt√®re derri√®re la t√™te.",
        equipement: "Halt√®re",
      },
      tags: ["Force", "Haut du corps"],
    },
    {
      exercice: {
        nom: "Dead bug",
        gif: "/assets/images/exercises/deadbug.gif",
        description:
          "Allong√© sur le dos, √©tendez simultan√©ment le bras droit et la jambe gauche.",
        equipement: "Aucun",
      },
      tags: ["Core", "Mobilit√©", "√âquilibre"],
    },
    {
      exercice: {
        nom: "V√©lo",
        gif: "/assets/images/exercises/bicycle.gif",
        description:
          "Allong√© sur le dos, amenez alternativement le coude vers le genou oppos√©.",
        equipement: "Aucun",
      },
      tags: ["Core", "Poids du corps"],
    },
    {
      exercice: {
        nom: "Bird dog",
        gif: "/assets/images/exercises/birddog.gif",
        description:
          "√Ä quatre pattes, √©tendez simultan√©ment le bras droit et la jambe gauche.",
        equipement: "Aucun",
      },
      tags: ["Core", "√âquilibre", "Mobilit√©"],
    },
    {
      exercice: {
        nom: "Relev√©s de jambes suspendu",
        gif: "/assets/images/exercises/legraises.gif",
        description:
          "Suspendu √† une barre, remontez les jambes tendues jusqu'√† l'horizontale.",
        equipement: "Barre de traction",
      },
      tags: ["Force", "Core", "Poids du corps"],
    },
  ];

  // Fonction pour trouver l'ID d'un tag par son nom
  const findTagIdByName = (tagName) => {
    const tag = tagIds.find((tag) => tag.nom === tagName);
    return tag ? tag.id_tag : null;
  };

  // Insertion des exercices avec leurs tags associ√©s
  for (const item of exercicesWithTags) {
    // Cr√©ation de l'exercice
    const createdExercice = await prisma.exercices.create({
      data: item.exercice,
    });

    // Attribution des tags sp√©cifiques √† l'exercice
    for (const tagName of item.tags) {
      const tagId = findTagIdByName(tagName);
      if (tagId) {
        await prisma.exercices_tags.create({
          data: {
            id_exercice: createdExercice.id_exercice,
            id_tag: tagId,
          },
        });
      }
    }
  }
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
